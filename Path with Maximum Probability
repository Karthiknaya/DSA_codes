class Solution {
    public double maxProbability(int n, int[][] edges, double[] succProb, int start_node, int end_node) {
        List<double[]>[] graph=new ArrayList[n];
        for(int i=0;i<n;i++){
            graph[i]=new ArrayList<>();
        }
        for(int i=0;i<edges.length;i++){
            int u=edges[i][0];
            int v=edges[i][1];
            double p=succProb[i];
            graph[edges[i][1]].add(new double[]{edges[i][0],succProb[i]});
            graph[edges[i][0]].add(new double[]{edges[i][1],succProb[i]});
        }
        PriorityQueue<double[]> pq=new PriorityQueue<>((a,b)->Double.compare(b[1],a[1]));
        pq.add(new double[]{start_node,1});
        boolean[] visited=new boolean[n];
        while(pq.size()!=0){
            double[] curr=pq.poll();
            if(curr[0]==end_node){
                return curr[1];
            }
            if(visited[(int)curr[0]])
            continue;
            visited[(int)curr[0]]=true;
            for(double[] l:graph[(int)curr[0]]){
                pq.add(new double[]{l[0],l[1]*curr[1]});
            }
        }
    return 0.0;
    }
}
