class Solution {
    public int findChampion(int n, int[][] edges) {
        List<List<Integer>> graph = buildGraph(n, edges);
        int[] inDegree = calculateInDegree(n, edges);
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            if (inDegree[i] == 0) {
                queue.offer(i);
            }
        }

        if (queue.size() != 1) {
            return -1; // No unique champion
        }

        int championCandidate = queue.poll();

        while (!queue.isEmpty()) {
            int node = queue.poll();

            for (int neighbor : graph.get(node)) {
                inDegree[neighbor]--;

                if (inDegree[neighbor] == 0) {
                    queue.offer(neighbor);
                }
            }
        }

        return championCandidate;
    }

    private static List<List<Integer>> buildGraph(int n, int[][] edges) {
        List<List<Integer>> graph = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<>());
        }

        for (int[] edge : edges) {
            int from = edge[0];
            int to = edge[1];
            graph.get(from).add(to);
        }

        return graph;
    }

    private static int[] calculateInDegree(int n, int[][] edges) {
        int[] inDegree = new int[n];

        for (int[] edge : edges) {
            int to = edge[1];
            inDegree[to]++;
        }

        return inDegree;
    }

}
