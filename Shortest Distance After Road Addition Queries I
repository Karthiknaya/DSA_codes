class Solution {
    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {
        List<List<Integer>> graph=new ArrayList<List<Integer>>();
        for(int i=0;i<n;i++){
            graph.add(new ArrayList<Integer>());
        }
        for(int i=0;i<n-1;i++){
            graph.get(i).add(i+1);
        }
        int[] distance_Arr=new int[queries.length];
        for(int i=0;i<queries.length;i++){
            graph.get(queries[i][0]).add(queries[i][1]);
            boolean []visited=new boolean[n];
            Queue<int[]> q=new LinkedList<int[]>();
            // add src and initial cout as 0 to queue
            q.offer(new int[]{0,0});
            visited[0]=true;
            while(!q.isEmpty()){
                int curr_node=q.peek()[0];
                int curr_count=q.peek()[1];
                q.remove();
                if(curr_node==n-1){
                    distance_Arr[i]=curr_count;
                    break;
                }
                for(int neighbour:graph.get(curr_node)){
                    if(visited[neighbour]) continue;
                    q.offer(new int[]{neighbour,curr_count+1});
                    visited[neighbour]=true;
                }
            }
        }
        return distance_Arr;
    }
}
