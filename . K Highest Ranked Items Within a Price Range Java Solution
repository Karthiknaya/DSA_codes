class Solution {
    int[][] dirs = {{1,0},{-1,0},{0,1},{0,-1}};
    public List<List<Integer>> highestRankedKItems(int[][] grid,int[] pricing,int[] start,int k) {
        int low=pricing[0];
        int high=pricing[1];
        int start_row=start[0];
        int start_column=start[1];
        int rows=grid.length; 
        int cols=grid[0].length;
        boolean[][] vis = new boolean[rows][cols];
        vis[start_row][start_column] = true;
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(start_row, start_column, grid[start_row][start_column], 0));
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        while(!q.isEmpty()) {
            Pair front = q.remove();
            int row = front.row;
            int col = front.col;
            int cost = front.cost;
            int curr_dist = front.curr_dist;
            if(cost>=low && cost<=high) {
                pq.add(front);
            }
            for(int[] dir:dirs) {
                    int nr = row + dir[0];
                    int nc = col + dir[1];
                    if(nr>=0 && nr<rows && nc>=0 && nc<cols && grid[nr][nc]>0 && !vis[nr][nc]) {
                        vis[nr][nc] = true;
                        q.add(new Pair(nr, nc, grid[nr][nc], curr_dist+1));
                    }
            }
        }
        List<List<Integer>> ans = new ArrayList<>();
        for(int i=0 ; i<k && !pq.isEmpty() ; i++) {
            Pair front = pq.remove();
            List<Integer> index = new ArrayList<>();
            index.add(front.row);
            index.add(front.col);
            ans.add(index);
        }
        return ans;
    }
     class Pair implements Comparable<Pair> {
        int row;
        int col;
        int cost;
        int curr_dist;
        public Pair(int row,int col,int cost,int curr_dist) {
            this.row=row;
            this.col= col;
            this.cost=cost;
            this.curr_dist=curr_dist;
        }
        @Override
        public int compareTo(Pair P2) {
            if(this.curr_dist!=P2.curr_dist) {
                return this.curr_dist-P2.curr_dist;
            }
            if(this.cost!=P2.cost) {
                return this.cost-P2.cost;
            }
            if(this.row!=P2.row) {
                return this.row-P2.row;
            }
            return this.col-P2.col; 
        }
    }
}
