class Solution {
    public List<TreeNode> allPossibleFBT(int n){
        if(n % 2 == 0)
            return new ArrayList<>();
        return get_valid_trees(n);
    }
    private List<TreeNode> get_valid_trees(int n){
        if(n==1){
            List<TreeNode> base = new LinkedList<>();
            base.add(new TreeNode(0));
            return base;
        }
        List<TreeNode> nodeList = new LinkedList<>();
        for(int i=1; i<n; i+= 2) {
            List<TreeNode> left_side = get_valid_trees(i);
            List<TreeNode> right_side = get_valid_trees(n-i-1);
            for(TreeNode left:left_side) {
                for(TreeNode right:right_side){
                    TreeNode node=new TreeNode(0);
                    node.left=left;
                    node.right=right;
                    nodeList.add(node);
                }
            }
        }
        return nodeList;
    }
}
