class Solution {
    public int largestPathValue(String colors, int[][] edges) {
        char[] colorArr = colors.toCharArray();
        int n = colorArr.length;
        List<Integer>[] graph = new List[n];
        for(int i = 0; i < n;i++) 
           graph[i] = new LinkedList<>();
        int[] indeg = new int[n];
        for(int[] edge:edges){
            int u = edge[0], v = edge[1];
            indeg[v]++;
            graph[u].add(v);
        }
        int[][] count = new int[n][26]; 
        Queue<Integer> q = new LinkedList<>();
        for(int i = 0; i < n;i++){
            if(indeg[i] == 0)
                q.offer(i);
        }
        int visited = 0;
        int result = 0;
        while (!q.isEmpty()){
            ++visited;
            int u = q.poll(), color = colorArr[u] -'a';
            result = Math.max(result, ++count[u][color]);
            for(int v: graph[u]){
                for(int i = 0; i < 26; ++i)
                    count[v][i] = Math.max(count[v][i], count[u][i]);
                
                if(--indeg[v] == 0)
                    q.offer(v); 
            }
        }
        return visited == n? result : -1;
    }
}
