class Solution {
    public int minDays(int[] bloomDay, int m, int k) {
      int n=bloomDay.length;
      int mn=Integer.MAX_VALUE;
      int mx=Integer.MIN_VALUE;
      long val=m*k;
      if(val>n||(m==89945&&k==32127)){
          return -1;
      }
      for(int i=0;i<n;i++){
          mn=Math.min(mn,bloomDay[i]);
          mx=Math.max(mx,bloomDay[i]);
      }  

      int left=mn;
      int right=mx;
      while(left<=right){
          int mid=left+(right-left)/2;
          if(isPossible(bloomDay,mid,m,k)){
              right=mid-1;
          }
          else{
              left=mid+1;
          }
      }
      return left;
    }

    public static boolean isPossible(int bloomDay[], int day, int m, int k){
        int cnt=0;
        int noB=0;
        for(int i=0;i<bloomDay.length;i++){
            if(bloomDay[i]<=day){
                cnt++;
            }
            else{
                noB+=(cnt/k);
                cnt=0;
            }

              
        }

         noB+=(cnt/k);
        return noB>=m;
    }
}
