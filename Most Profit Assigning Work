class Solution {
    public int maxProfitAssignment(int[] difficulty, int[] profit, int[] worker) {
        PriorityQueue<int[]>pq=new PriorityQueue<>((a,b)->a[0]-b[0]);
        for(int i=0;i<difficulty.length;i++){
            pq.offer(new int[]{difficulty[i],profit[i]});
        }
        PriorityQueue<Integer> pq1=new PriorityQueue<>();
        for(int i:worker){
            pq1.offer(i);
        }
        int ans=0;
        while(pq.size()>0&&pq1.size()>0){
           int[]curr=pq.poll();
           if(curr[0]>pq1.peek()){
        
           }
           else{
            int curr_max=curr[1];
            while(pq.size()>0&&pq.peek()[0]<=pq1.peek()){
               if(curr_max<pq.peek()[1]){
                curr_max=pq.peek()[1];
                curr=pq.peek();
               }
               pq.poll();
            }
            ans+=curr_max;
           
           }
            pq.offer(curr);
           pq1.poll();
        }
        return ans;
    }
}
