class Solution { 
    public List<Integer> remainingMethods(int n, int k, int[][] invocations) {
        List<List<Integer>> graph = new ArrayList<>(n);
        boolean[] visited = new boolean[n];
        for(int i=0;i<n;i++){
            graph.add(new ArrayList<>());
        }
        for(int[] item:invocations){
            graph.get(item[0]).add(item[1]);
        }
        DFS(graph, visited, k);
        for(int i=0;i<n;i++){
            if(!visited[i]){
                for(int neighbour:graph.get(i)){
                    if(visited[neighbour]){
                        List<Integer> list = new ArrayList<>();
                        for(int i1=0; i1<n; i1++){
                            list.add(i1);
                        }
                        return list;
                    }
                }
            }
        }
        
        List<Integer> list = new ArrayList<>();
        for(int i=0; i<n; i++){
            if(!visited[i]){
                list.add(i);
            }
        }
      return list;
    }
    private void DFS(List<List<Integer>> graph, boolean[] visited, int k){
        visited[k]=true;
        Queue<Integer> q = new LinkedList<>();
        q.offer(k);
        while(!q.isEmpty()){
            int curr = q.poll();
            for(int neighbour:graph.get(curr)){
                if(!visited[neighbour]){
                    visited[neighbour]=true;
                    q.offer(neighbour);
                }
            }
        }
    }
}
