class Solution{
    private static String check_alternate_vowel(String str){
        StringBuilder sb = new StringBuilder();
        str=str.toLowerCase();
        for(int i=0;i<str.length();i++){
            char curr_char = str.charAt(i);
            if(curr_char == 'a' || curr_char == 'e' || curr_char == 'i' || curr_char == 'o' || curr_char == 'u') {
                sb.append('0');
            } else {
                sb.append(curr_char);
            }
        }
        return sb.toString();
    }
    public String[] spellchecker(String[] wordlist, String[] queries) {
        int n =queries.length;
        Set<String> set = new HashSet<>();
        Map<String,Integer> map1 = new HashMap<>();
        Map<String,Integer> map2 = new HashMap<>();
        String result[] = new String[n];
        for(String str :wordlist){
        set.add(str);
        }
        for(int i=0;i<wordlist.length;i++) {
            if(!map2.containsKey(wordlist[i].toLowerCase())) {
                map2.put(wordlist[i].toLowerCase(),i);
            }
        }  
        for(int i=0; i<wordlist.length; i++) {
            String str = check_alternate_vowel(wordlist[i]);
            if(!map1.containsKey(str)) {
                map1.put(str,i);
            }
        }
        for(int i=0; i<n; i++) {
            String str = queries[i];
            if(set.contains(str)) {
                result[i] = str;
            }else if(map2.containsKey(str.toLowerCase())) {
                 result[i] = wordlist[map2.get(str.toLowerCase())];
            }else if(map1.containsKey(check_alternate_vowel(str))) {
                result[i] = wordlist[map1.get(check_alternate_vowel(str))];
            }else{
                result[i] = "";
            }
        }
       return result;
    }
}






