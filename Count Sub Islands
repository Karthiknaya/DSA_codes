class Solution {
    public int countSubIslands(int[][] grid1, int[][] grid2) {
        int rows = grid2.length, cols = grid2[0].length;
        int count = 0;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid2[i][j] == 1) {
                    if (getIslands(grid1, grid2, i, j)) {
                        count++;
                    }
                }
            }
        }  
        return count;
    }
    private boolean getIslands(int[][] grid1, int[][] grid2, int row, int col) {
        if(row < 0 || row >= grid2.length || col < 0 || col >= grid2[0].length || grid2[row][col] == 0){
            return true;
        }
        if(grid1[row][col] == 0){
            return false;
        }
        grid2[row][col]=0;
        boolean is_unic_land = true;
        is_unic_land &= getIslands(grid1, grid2, row - 1, col); 
        is_unic_land &= getIslands(grid1, grid2, row + 1, col); 
        is_unic_land &= getIslands(grid1, grid2, row, col - 1); 
        is_unic_land &= getIslands(grid1, grid2, row, col + 1);
        return is_unic_land;
    }
}
