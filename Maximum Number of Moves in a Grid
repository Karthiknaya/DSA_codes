class Solution {
    public int maxMoves(int[][] grid) {
        int m =grid.length;
        int n =grid[0].length;
        Integer dp[][] =new Integer[m][n];
        int max_Count =0;
        for(int i=0;i<m;i++){
          max_Count =Math.max(max_Count,getMax_Count(grid,i,0,m,n,dp));
        }
        return max_Count;
    }
    public int getMax_Count(int grid[][],int row,int col,int m,int n,Integer[][] dp){
        if(dp[row][col] != null){
            return dp[row][col];
        }
        int upside =0;
        int frontside =0;
        int downside= 0;
        if(row-1 >=0 && col +1 <n && grid[row][col] < grid[row-1][col+1]){
            upside = getMax_Count(grid,row-1,col+1,m,n,dp)+1;
        }
        if(row >=0 && col +1 <n && grid[row][col] < grid[row][col+1]){
            frontside = getMax_Count(grid,row,col+1,m,n,dp)+1;
        }
        if(row+1 < m && col +1 <n && grid[row][col] < grid[row+1][col+1]){
            downside = getMax_Count(grid,row+1,col+1,m,n,dp)+1;
        }
        return dp[row][col] =Math.max(upside,Math.max(downside,frontside));
    }
}
