class Solution{
    public String getDirections(TreeNode root, int startValue, int destValue) {
        TreeNode lca = get_LCA(root, startValue, destValue);
        StringBuilder startPath = new StringBuilder();
        StringBuilder destPath = new StringBuilder();
        get_Path(lca, startValue, startPath);
        get_Path(lca, destValue, destPath);
        for(int i = 0; i < startPath.length(); i++){
            startPath.setCharAt(i, 'U');
        }
        return startPath.toString()+destPath.reverse().toString();
    }
    private TreeNode get_LCA(TreeNode node, int p, int q){
        if(node == null || node.val == p || node.val == q){
            return node;
        }
        TreeNode left = get_LCA(node.left, p, q);
        TreeNode right = get_LCA(node.right, p, q);
        if(left != null && right != null){
            return node;
        }
        return left != null ? left : right;
    }
    private boolean get_Path(TreeNode node, int target, StringBuilder path){
        if(node == null){
            return false;
        }
        if(node.val == target){
            return true;
        }
        if(get_Path(node.left,target,path)){
            path.append('L');
            return true;
        }
        if(get_Path(node.right, target, path)){
            path.append('R');
            return true;
        }
        return false;
    }
}
