class Solution {
    private void get_nodes(int node, int parent, List<List<Integer>> res, List<List<Integer>> adj) {
        for (int adjNode : adj.get(node)) {
            if (res.get(adjNode).isEmpty() || res.get(adjNode).get(res.get(adjNode).size() - 1) != parent) {
                res.get(adjNode).add(parent);
                get_nodes(adjNode, parent, res, adj);
            }
        }
    }
    public List<List<Integer>> getAncestors(int n, int[][] edges) {
        List<List<Integer>> res = new ArrayList<>();
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < n; ++i) {
            res.add(new ArrayList<>());
            adj.add(new ArrayList<>());
        }

        for (int[] edge : edges) {
            adj.get(edge[0]).add(edge[1]);
        }

        for (int i = 0; i < n; ++i) {
            get_nodes(i, i, res, adj);
        }

        return res;
    }
}
