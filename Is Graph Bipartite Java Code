class Solution {
    class Edge {
        int src;
        int dest;
        public Edge(int src, int dest) {
            this.src = src;
            this.dest = dest;
        }
    }
    public boolean isBipartite(int[][] grid) {
        List<Edge>[] graph = new ArrayList[grid.length];
        for(int i=0;i<graph.length;i++) {
            graph[i]=new ArrayList<>();
        }
        for(int i=0;i<grid.length;i++) {
            for(int j=0;j<grid[i].length;j++) {
                int src=i;
                int dest=grid[i][j];
                graph[src].add(new Edge(src,dest));
                graph[dest].add(new Edge(dest,src));
            }
        }
        int color[]=new int[graph.length];
        Arrays.fill(color,-1);
        Queue<Integer> q=new LinkedList<>();
        for(int i=0;i<graph.length;i++) {
            if(color[i]==-1) {
                q.add(i);
                color[i]=0;
                while(!q.isEmpty()) {
                    int curr=q.poll();
                    for(int j=0;j<graph[curr].size();j++) {
                        Edge e=graph[curr].get(j);
                        if(color[e.dest]==-1) {
                            int nextCol=color[curr]==0 ?1:0;
                            color[e.dest]=nextCol;
                            q.add(e.dest);
                        }
                        else if(color[e.dest] == color[curr]) {
                            return false;
                        }
                    }
                }
            }
        }
        return true;
    }
}
