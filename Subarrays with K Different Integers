class Solution{
     private int get_Pairs(int[] nums, int k) {
        int n=nums.length;
        Map<Integer, Integer> map = new HashMap<>();
        int left=0;
        int right=0;
        int ans=0;
        while(right < n){
            map.put(nums[right], map.getOrDefault(nums[right], 0) + 1);
            while (map.size() > k) {
                map.put(nums[left], map.get(nums[left]) - 1);
                if (map.get(nums[left]) == 0) {
                    map.remove(nums[left]);
                }
                left++;
            }
            ans += right - left + 1;
            right++;
        }
        return ans;
    }
    public int subarraysWithKDistinct(int[] nums, int k){
        return get_Pairs(nums, k) - get_Pairs(nums, k - 1);
    }
} Subarrays with K Different Integers Subarrays with K Different Integers
