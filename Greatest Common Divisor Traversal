class Solution { 
    public boolean canTraverseAllPairs(int[] nums) {
        final int n =nums.length;
        if (n==1){
            return true;
        }
        int[] parent = new int[n];
        int[] rank = new int[n];
        for (int i=0;i<n;i++){
            parent[i] = i;
            rank[i] = 1;
        }
        Map<Integer,Integer> map=new HashMap<>();
        for (int i=0;i<n;i++){
            int num=nums[i];
            if(num==1){
                return false;
            }
            for(int dig=2;dig*dig<=num;dig++){
                if(num%dig ==0){
                    if(map.containsKey(dig)){
                        union(parent, rank, i,map.get(dig));
                    }else{
                        map.put(dig, i);
                    }
                    while(num%dig==0){
                        num/=dig;
                    } 
                }
            }
            if(num>1){
                if(map.containsKey(num)){
                    union(parent, rank, i, map.get(num));
                }else{
                    map.put(num, i);
                }
            }
        }
        return rank[find(parent,0)]==n;
    }
     private int find(int[] parent,int x) {
        if(parent[x]==x){
            return x;
        }
        return parent[x]=find(parent,parent[x]);
    }
    private void union(int[] parent, int[] rank, int x, int y) {
        x=find(parent,x);
        y=find(parent,y);
        if(x==y){
            return;
        }
        if(rank[x]<rank[y]){
            int t = x;
            x = y;
            y = t;
        }
        parent[y] = x;
        rank[x] += rank[y];
    }    
}
