class Solution {
    public long minimumCost(String source, String target, char[] original, char[] changed, int[] cost) {
        int n=cost.length;
        int size=26;
        long price=0;
        int[][] graph=new int[size][size];
        for(int i=0;i<size;i++){
            for(int j=0;j<size;j++){
                if(i!=j)
                graph[i][j]=Integer.MAX_VALUE;
                else
                graph[i][j]=0;
            }
        }
        for(int i=0;i<n;i++){
            graph[original[i]-'a'][changed[i]-'a']=Math.min(cost[i], graph[original[i]-'a'][changed[i]-'a']);
        }
        for(int k=0;k<size;k++){
            for(int i=0;i<size;i++){
                for(int j=0;j<size;j++){
                    if(graph[i][k]!=Integer.MAX_VALUE && graph[k][j]!=Integer.MAX_VALUE && graph[i][j]>graph[i][k]+graph[k][j])
                    graph[i][j]=graph[i][k]+graph[k][j];
                }
            }
        }
        for(int i=0;i<source.length();i++){
            char ch1=source.charAt(i);
            char ch2=target.charAt(i);
            if(ch1!=ch2){
                if(graph[ch1-'a'][ch2-'a']==Integer.MAX_VALUE)
                return -1;
                price+=(long)graph[ch1-'a'][ch2-'a'];
            }
        }
        return price;
    }
}
