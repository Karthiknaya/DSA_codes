class Solution{
     private String getSwapped(String str, int ind1, int ind2){
       StringBuilder sb = new StringBuilder(str);
        sb.setCharAt(ind1,str.charAt(ind2));
        sb.setCharAt(ind2,str.charAt(ind1));
        return sb.toString();
    }
    public int slidingPuzzle(int[][] board){
        // next directions accoring to index position
        int[][] dir={{1, 3},{0, 2, 4},{1, 5},{0, 4},{3, 1, 5},{4, 2}};
        String targetState ="123450";
        StringBuilder currState =new StringBuilder();
        for (int[] arr :board){
            for (int num :arr) {
                currState.append(num);
            }
        }
        if (currState.toString().equals(targetState)) {
            return 0;
        }
        Set<String> VisSet = new HashSet<>();  
        Queue<String> q = new LinkedList<>(); 
        q.add(currState.toString());
        VisSet.add(currState.toString());

        int minMoves =0;
        while (!q.isEmpty()){
            int size = q.size();
            while(size>0){
                String curr =q.poll();
                if (curr.equals(targetState)) {
                    return minMoves;
                }

                int EmptyCell =curr.indexOf('0');
                for (int newPos : dir[EmptyCell]) {
                    String nextState = getSwapped(curr, EmptyCell,newPos);
                    if (!VisSet.contains(nextState)) {
                        VisSet.add(nextState);
                        q.add(nextState);
                    }
                }
                size--;
            }
            minMoves++;
        }
        return -1;  
    }
}
