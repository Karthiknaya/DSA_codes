class Solution {
    public List<Integer> findAllPeople(int n, int[][] meetings, int firstPerson) {
        List<List<int[]>> graph=new ArrayList<>();
        for(int i=0;i<n;i++){
           graph.add(new ArrayList<>());
        }
        for(int Edge[]:meetings){
            graph.get(Edge[0]).add(new int[]{Edge[1],Edge[2]});
            graph.get(Edge[1]).add(new int[]{Edge[0],Edge[2]});
        }
        graph.get(0).add(new int[]{firstPerson,0});
        int vis[]=new int[n];
        Arrays.fill(vis,-1);
        PriorityQueue<int[]> pq=new PriorityQueue<>((a,b)->{
            return a[1]-b[1];
        });
        pq.add(new int[]{0,0});
        while(pq.size()>0){
            int Edge[]=pq.poll();
            int curr_time=Edge[1];
            if(vis[Edge[0]]==-1){
                vis[Edge[0]]=1;
                for(int[] arr:graph.get(Edge[0])){
                    if(arr[1]>=curr_time){
                        pq.add(arr);
                    }
                }
            }
        }
        List<Integer> ans=new ArrayList<>();
        for(int i=0;i<n;i++){
            if(vis[i]!=-1) ans.add(i);
        }
        return  ans;
    }
}
