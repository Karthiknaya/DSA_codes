class Solution {
    int mod=1000000007;
     public class Pair{
        int dest;
        long wt;
        public Pair(int dest, long wt){
            this.dest=dest;
            this.wt=wt;
        }
    }
    public int countPaths(int n, int[][] roads) {
        List<List<Pair>>graph = new ArrayList<>();
        for(int i=0;i<n;i++){
            graph.add(new ArrayList<>());
        }
        for(int[] edge : roads){
            int src=edge[0];
            int dest=edge[1];
            int wt=edge[2];
            graph.get(src).add(new Pair(dest,wt));
            graph.get(dest).add(new Pair(src,wt));
        }
        long dist[]=new long[n];
        int count[]=new int[n];
        Arrays.fill(dist, Long.MAX_VALUE);
        dist[0]=0;
        count[0]=1;
        PriorityQueue<Pair> pq = new PriorityQueue<>((a,b)->Long.compare(a.wt,b.wt));
        pq.add(new Pair(0,0));
        while(!pq.isEmpty()){
            Pair curr=pq.poll();
            int curr_node=curr.dest;
            long curr_wt=curr.wt;
            for(Pair neighbour:graph.get(curr_node)){
                if(curr_wt+neighbour.wt<dist[neighbour.dest]){
                    count[neighbour.dest]=count[curr_node];
                    dist[neighbour.dest]=curr_wt+neighbour.wt;
                    pq.add(new Pair(neighbour.dest,curr_wt + neighbour.wt));
                }else if(curr_wt+neighbour.wt==dist[neighbour.dest]){
                    count[neighbour.dest]=(count[neighbour.dest]+count[curr_node])%mod;
                }
            }
        }
        return count[n-1]%mod;
    }
}
