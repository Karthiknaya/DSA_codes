class Solution{
    Long[][] dp;
    public long minimumTotalDistance(List<Integer> robotList, int[][] factory) {
        int[] robotArr = new int[robotList.size()];
        int k=0;
        for(int item:robotList){
            robotArr[k++]=item;
        }
        Arrays.sort(robotArr);
        Arrays.sort(factory,(a, b) ->Integer.compare(a[0], b[0]));
        dp = new Long[robotArr.length][factory.length];
        return getmin_Moves(0, 0,robotArr,factory);
    }
     private long getmin_Moves(int robotIdx, int factoryIdx, int[] robotArr, int[][] factory){
        if(robotIdx == robotArr.length){
            return 0;
        }
        if(factoryIdx == factory.length){
            return Long.MAX_VALUE;
        }
        if(dp[robotIdx][factoryIdx] != null){
            return dp[robotIdx][factoryIdx];
        }
        long min_moves =getmin_Moves(robotIdx, factoryIdx + 1, robotArr, factory);
        long curr_moves=0;
        for(int k=0;k<factory[factoryIdx][1] && robotIdx+k<robotArr.length;++k){
            curr_moves+=Math.abs(robotArr[robotIdx + k] - factory[factoryIdx][0]);
            long next_moves = getmin_Moves(robotIdx +k+1,factoryIdx + 1,robotArr,factory);
            if (next_moves !=Long.MAX_VALUE) {
                min_moves = Math.min(min_moves, curr_moves + next_moves);
            }
        }
        return dp[robotIdx][factoryIdx] = min_moves;
    }
}
