class Solution{
    private long prev_num(char[] arr){
        int n = arr.length;
        for(int i = 0; i < n / 2; i++) {
            while(arr[i] != arr[n - 1 - i]){
                Decrement_num(arr, n - 1 - i);
                if(arr[0] == '0') return Long.parseLong(new String(arr));
            }
        }
        return Long.parseLong(new String(arr));
    }

    private void Decrement_num(char[] arr, int i){
        while(arr[i] == '0') arr[i--] = '9';
        arr[i]--;
    }

    private long next_num(char[] arr) {
        int n = arr.length;
        for(int i = 0; i < n / 2; i++) {
            while(arr[i] != arr[n - 1 - i]){
                Increment_num(arr, n - 1 - i);
            }
        }
        return Long.parseLong(new String(arr));
    }

    private void Increment_num(char[] arr, int i){
        while(arr[i] == '9') arr[i--] = '0';
        arr[i]++;
    }

    public String nearestPalindromic(String n){
        long num = Long.parseLong(n);
        long small_num = prev_num(String.valueOf(num - 1).toCharArray());
        long large_num = next_num(String.valueOf(num + 1).toCharArray());
        return String.valueOf(large_num - num < num - small_num ? large_num : small_num);
    }
}
