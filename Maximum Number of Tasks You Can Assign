class Solution {
    public int maxTaskAssign(int[] tasks, int[] workers, int pills, int strength) {
        int m = tasks.length;
        int n = workers.length;
        Arrays.sort(tasks);
        Arrays.sort(workers);
        int left = 0, right = Math.min(m, n);
        while (left <= right) {
            int mid = left+(right-left)/2;
            if (canAssign(tasks, workers, pills, strength, mid, n - mid)) {
                left = mid + 1;  
            } else {
                right = mid - 1;  
            }
        }
        return right; 
    }
    public boolean canAssign(int[] tasks, int[] workers, int pills, int strength, int mid, int start) {
        int[] dQueue = new int[mid]; 
        int write = 0, read = 0;
        for(int i = 0, j = 0; i < mid; i++){
            int curStrength = workers[start + i];
            if(read == write){ 
                if(curStrength >= tasks[j]){
                    j++;
                    continue;
                }
                if (pills == 0)return false;
                curStrength += strength;
                pills--;
                while (j < mid && curStrength >= tasks[j]) {
                    dQueue[write++] = tasks[j++];
                }
                if (read == write) return false;
                write--; 
            }else{
                if(curStrength >= dQueue[read]){
                    read++;
                    continue;
                }
                if (pills == 0) return false;
                curStrength += strength;
                pills--;
                while (j < mid && curStrength >= tasks[j]) {
                    dQueue[write++] = tasks[j++];
                }
                write--;
            }
        }
        return read == write;
    }
}
