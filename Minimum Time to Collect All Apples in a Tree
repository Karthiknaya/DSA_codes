class Solution{
    private int dfs(List<List<Integer>> graph , int cur , int parent ,List<Boolean> hasApple ){
        int time = 0;
        for(Integer child : graph.get(cur)){
          if( child == parent){
            continue;
          }
          int time_for_child = dfs(graph,child,cur,hasApple);
          //+2 because one to visit and another to go back
          if(time_for_child >0 || hasApple.get(child) == true){
            time += time_for_child + 2;
          }
        }
        return time;
    }
    public int minTime(int n, int[][] edges, List<Boolean> hasApple) {
        List<List<Integer>> graph = new ArrayList<>();
        for(int i=0;i<n;i++){
            graph.add(new ArrayList<>());
        }
        for(int edge[]: edges){
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
        return dfs(graph,0,-1,hasApple);
    }
}
