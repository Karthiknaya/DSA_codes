class DSU{
    int parent[];
    int rank[];
    DSU(int n){
        parent = new int[n];
        rank = new int[n];
        for(int i=0; i<n; i++) parent[i] = i;
    }
    public int findParent(int a){
        if(parent[a]==a) return a;
        else return parent[a] = findParent(parent[a]);
    }
    public void union(int a, int b){
        a =findParent(a);
        b =findParent(b);
        if(rank[a]>=rank[b]){
            parent[b] = a;
            rank[a]++;
        }else{
            parent[a] = b;
            rank[b]++;
        }
    }
}
class Solution {
    public int[] minimumCost(int n, int[][] edges, int[][] query) {
        int wtArr[] = new int[n];
        Arrays.fill(wtArr,131071);
        DSU dsu = new DSU(n);
        for(int[] edge : edges){
            int a = edge[0];
            int b = edge[1];
            int wt = edge[2];
            int parA = dsu.findParent(a);
            int parB = dsu.findParent(b);
            dsu.union(parA,parB);
            int currWeight = wtArr[parA] & wtArr[parB] & wt;
            wtArr[parA] = currWeight;
            wtArr[parB] = currWeight;
        }
        int result[] = new int[query.length];
        int ind =0;
        for(var q : query){
            int a = q[0];
            int b = q[1];
            if(a==b) result[ind++] = 0;
            else if(dsu.findParent(a)!=dsu.findParent(b)) result[ind++] = -1;
            else result[ind++] = wtArr[dsu.findParent(a)];
        }
        return result;
    }
}
