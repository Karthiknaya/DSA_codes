class Solution {
    public List<Boolean> checkIfPrerequisite(int numCourses, int[][] prerequisites, int[][] queries) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        List<Boolean> result = new ArrayList<>();
        for(int i=0; i<numCourses;i++){
            graph.put(i, new ArrayList<>());
        }
        for(int prerequisite[] : prerequisites){
            graph.get(prerequisite[0]).add(prerequisite[1]);
        }
        for(int query[] : queries){
            result.add(isvalid(query[0], query[1], new boolean[numCourses], graph));
        }
        return result;
    }
    public Boolean isvalid(int src, int dest, boolean visited[], Map<Integer, List<Integer>> graph){
        if(src == dest){
            return true;
        }
        visited[src] = true;
        for(int node : graph.get(src)){
            if(!visited[node]){
                if(isvalid(node, dest, visited, graph)){
                    return true;
                }
            }
        }
        return false;
    }
}
