class Solution {
    private int getSum(int[] freq, int x) {
        PriorityQueue<Integer> pq = new PriorityQueue<>((a,b)->freq[a]==freq[b]?a-b:freq[a]-freq[b]);
        for(int i=0;i<51;i++){
            if(freq[i] !=0){
                pq.offer(i);
            }
            if(pq.size()>x){
                pq.poll();
            }
        }
        int ans=0;
        while (!pq.isEmpty()) {
            int curr = pq.poll();
            ans+=curr*freq[curr];
        }
        return ans;
    }
    public int[] findXSum(int[] nums, int k, int x){
        int[] ans = new int[nums.length-k+1];
        int[] freq = new int[51];
        for(int i=0;i<k;i++){
            freq[nums[i]]++;
        }
        ans[0] = getSum(freq, x);
        for(int i=k;i< nums.length;i++){
            if(nums[i] != nums[i-k]){
                freq[nums[i]]++;
                freq[nums[i-k]]--;
                ans[i-k+1] = getSum(freq, x);
            }else{
                ans[i-k+1] = ans[i-k];
            }
        }
        return ans;
    }
}
