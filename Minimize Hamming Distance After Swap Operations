class Solution {
    public int minimumHammingDistance(int[] source, int[] target, int[][] allowedSwaps) {
        int n = source.length;
        parent = new int[n];
        rank = new int[n];
        for( int i = 0; i < n; i++) parent[i]=i;
        for( int[] swap : allowedSwaps){
            union(swap[0], swap[1]);
        }
        HashMap<Integer, Integer>[] maps = new HashMap[n];
        for( int i = 0; i < n; i++){
            int par = find_parent(i);
            if( maps[par] == null) maps[par] = new HashMap<>();
            maps[par].put(source[i], maps[par].getOrDefault(source[i], 0)+1);
        }
        int diff=0;
        for( int i = 0; i < n; i++){
            int par = find_parent(i);
            if( maps[par].containsKey(target[i])){
                int freq = maps[par].get(target[i]);
                if( freq == 1)
                    maps[par].remove(target[i]);
                else
                    maps[par].put(target[i], freq-1);
            }else{
                diff++;
            }
        }
        return diff;
    }
    int[] parent,rank;
    public int find_parent(int x){
        if(parent[x] == x) return x;
        return parent[x] = find_parent(parent[x]);
    }
    public void union(int x, int y){
        int px = find_parent(x), py = find_parent(y);
        if( px != py){
            if( rank[px]> rank[py])
                parent[py] = px;
            else if( rank[px] < rank[py])
                parent[px] = py;
            else{
                parent[py] = px;
                rank[px]++;
            }
        }
    } 
}
