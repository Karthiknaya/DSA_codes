class Solution {
    public int maxProductPath(int[][] a) {
        int n = a.length, m = a[0].length;
        long[][] max_dp = new long[n][m];
        long[][] min_dp = new long[n][m];
        max_dp[0][0] = min_dp[0][0] = a[0][0];

        for (int i = 1; i < n; i++) {
            max_dp[i][0] = max_dp[i - 1][0] * a[i][0];
            min_dp[i][0] = min_dp[i - 1][0] * a[i][0];
        }
        for (int i = 1; i < m; i++) {
            max_dp[0][i] = max_dp[0][i - 1] * a[0][i];
            min_dp[0][i] = min_dp[0][i - 1] * a[0][i];
        }
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                if (a[i][j] >= 0) {
                    max_dp[i][j] = Math.max(max_dp[i - 1][j], max_dp[i][j - 1]) * a[i][j];
                    min_dp[i][j] = Math.min(min_dp[i - 1][j], min_dp[i][j - 1]) * a[i][j];
                } else {
                    min_dp[i][j] = Math.max(max_dp[i - 1][j], max_dp[i][j - 1]) * a[i][j];
                    max_dp[i][j] = Math.min(min_dp[i - 1][j], min_dp[i][j - 1]) * a[i][j];
                }
            }
        }
        return max_dp[n - 1][m - 1] < 0 ? -1 : (int) (max_dp[n - 1][m - 1] % 1000000007);
    }
}
