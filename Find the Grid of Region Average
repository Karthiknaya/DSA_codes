class Solution{
    private boolean isValidRegion(int[][] image,int startRow,int startCol,int threshold){
        for(int i=startRow;i<startRow+3;i++){
            for(int j=startCol;j<startCol+3;j++){
                if(i>startRow&&Math.abs(image[i][j]-image[i-1][j])>threshold){
                    return false;
                }
                if(j>startCol&&Math.abs(image[i][j]-image[i][j-1])>threshold){
                    return false;
                }
            }
        }
        return true;
    }
    private int getSubgridSum(int[][] image,int startRow,int startCol) {
        int subgridSum=0;
        for(int i=startRow;i<startRow+3;i++){
            for(int j=startCol;j<startCol+3;j++){
                subgridSum+=image[i][j];
            }
        }
        return subgridSum;
    }
    public int[][] resultGrid(int[][] image, int threshold){
        final int m=image.length,n=image[0].length;
        int[][] sumForAvg=new int[m][n],participation=new int[m][n];
        for(int startRow=0;startRow<m-2;startRow++){
            for(int startCol=0;startCol<n-2;startCol++){
                if(isValidRegion(image,startRow,startCol,threshold)){
                    final int subgridSum=getSubgridSum(image,startRow,startCol);
                    for(int i=startRow;i<startRow+3;i++){
                        for(int j=startCol;j<startCol+3;j++){
                            sumForAvg[i][j]+=subgridSum/9;
                            participation[i][j]++;
                        }
                    }
                }
            }
        }
        for(int startRow=0;startRow<m;startRow++){
            for(int startCol=0;startCol<n;startCol++){
                if(participation[startRow][startCol]>0){
                    image[startRow][startCol]=sumForAvg[startRow][startCol]/participation[startRow][startCol];
                }
            }
        }
        return image;
    }
}
