class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        List<List<Integer>> graaph = new ArrayList<>();
        List<Integer> safe_states = new ArrayList<>();
        for(int i = 0; i < graph.length; i++) {
            graaph.add(new ArrayList<>());
        }
        int indeg[] = new int[graph.length];
        for(int i = 0; i < graph.length; i++) {
            for(int j = 0; j < graph[i].length; j++) {
                graaph.get(graph[i][j]).add(i);
                indeg[i]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for(int i = 0; i < graph.length; i++) {
            if(indeg[i] == 0)
                q.add(i);
        }
        while(!q.isEmpty()) {
            int curr = q.poll();
            safe_states.add(curr);
            for(int dest : graaph.get(curr)) {
                indeg[dest]--;
                if(indeg[dest] == 0)
                    q.add(dest);
            }
        }
    Collections.sort(safe_states);
    return safe_states;
    }
}
