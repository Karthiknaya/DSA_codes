class Solution{
    int[] indexArr=new int[3000];
    int[][] dp;
    public int maxRemovals(String source, String pattern, int[] targetIndices){
        for(int index :targetIndices){
            indexArr[index] = 1;
        }
        dp=new int[source.length()][pattern.length()];
        for(int[] row :dp){
            Arrays.fill(row, -1);
        }
        return Math.max(0, getMaxcount(source,pattern,0,0));
    }
     private int getMaxcount(String source, String pattern, int i, int j){ 
        if(i == source.length()){
            if(j == pattern.length()){
                return 0;
            }
            return Integer.MIN_VALUE;
        }
        if(j == pattern.length()){
            return indexArr[i] + getMaxcount(source,pattern,i+1,j);
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        int removeInd =Integer.MIN_VALUE;
        int notRemove =Integer.MIN_VALUE;
        int validInd=indexArr[i];
        if(source.charAt(i) == pattern.charAt(j)){
            removeInd = validInd+getMaxcount(source,pattern,i+1,j);
            notRemove = getMaxcount(source, pattern, i + 1, j + 1);
        }else{
            removeInd = validInd + getMaxcount(source, pattern, i + 1, j);
            
        }
        return dp[i][j] = Math.max(removeInd, notRemove);
    }
}
